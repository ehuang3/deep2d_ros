#!/usr/bin/env python
from __future__ import division

import os
import sys
from time import time

import click
import matplotlib.pyplot as plt
import numpy as np
import numpy.linalg as linalg
import numpy.random as rand
import scipy.io as io

import deep2d
import deep2d_data
from apriltags import AprilTagDetections


@click.group(chain=True)
@click.pass_context
def run(ctx):
    ctx.obj['data_path'] = 'data'

@click.command()
@click.option('--red', '-r', default=6,  help='Number of red sliders.')
@click.option('--blue', '-b', default=6, help='Number of blue sliders.')
@click.option('--yellow', '-y', default=6, help='Number of yellow sliders.')
@click.option('--green', '-g', default=6, help='Number of green sliders.')
@click.pass_context
def sort(ctx, red, blue, yellow, green):
    # Create a sorting problem generator.
    ctx.obj['generator'] = deep2d_data.SortingProblemGenerator(red, blue, yellow, green)
    ctx.obj['data_path'] = os.path.join(ctx.obj['data_path'], 'sort')

@click.command()
@click.option('--numcams', '-c', default=4, help='Number of cameras.')
@click.option('--delay', '-d', default=1, help='Time delay.')
@click.pass_context
def apriltags(ctx, numcams, delay):
    # Get problem generator.
    generator = ctx.obj['generator']

    # Initialize ROS.
    rospy.init_node('robot_sim')
    pubs = []
    for i in range(numcams):
        pubs.append(rospy.Publisher('elp_cam_%d/detections' % i, 
                    AprilTagDetections, queue_size=10))
    print pubs

# Commands.
run.add_command(sort)
run.add_command(apriltags)

def main():
    run(obj={})

if __name__=='__main__':
    main()
